import{_ as a,c as s,o as e,a1 as n,a3 as p}from"./chunks/framework.C7k3oYIG.js";const b=JSON.parse('{"title":"vue cli","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"基础/vueCli.md","filePath":"基础/vueCli.md"}'),t={name:"基础/vueCli.md"},i=n(`<h1 id="vue-cli" tabindex="-1">vue cli <a class="header-anchor" href="#vue-cli" aria-label="Permalink to &quot;vue cli&quot;">​</a></h1><h2 id="vue-cli核心概念" tabindex="-1">vue cli核心概念 <a class="header-anchor" href="#vue-cli核心概念" aria-label="Permalink to &quot;vue cli核心概念&quot;">​</a></h2><p>Vue2 推荐使用。 Vue3 使用vite。</p><p>Vue CLI 实际上是对 Webpack 的一个封装，它使用 Webpack 作为底层的打包工具，但提供了更高层次的抽象和简化。通过 Vue CLI，开发者不需要直接配置 Webpack，可以通过 Vue CLI 提供的命令和配置文件来完成大部分的工作。</p><p>默认配置：Vue CLI 提供了一些默认的 Webpack 配置，适合大多数项目需求。<br> 可扩展性：如果需要自定义 Webpack 配置，Vue CLI 允许通过 vue.config.js 文件进行配置，或者使用 Vue CLI 插件来扩展功能。<br> 插件化：Vue CLI 的插件系统可以在项目初始化时或之后添加各种功能，而这些插件很多都是基于 Webpack 的。</p><h3 id="使用-的场景" tabindex="-1">使用 ~ 的场景 <a class="header-anchor" href="#使用-的场景" aria-label="Permalink to &quot;使用 ~ 的场景&quot;">​</a></h3><h4 id="_1-在-css-scss-文件中引入资源" tabindex="-1">1. 在 CSS/SCSS 文件中引入资源： <a class="header-anchor" href="#_1-在-css-scss-文件中引入资源" aria-label="Permalink to &quot;1. 在 CSS/SCSS 文件中引入资源：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.background {</span></span>
<span class="line"><span>  background-image: url(&#39;~@/assets/images/background.png&#39;);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_2-在-vue-模板中引入资源" tabindex="-1">2. 在 Vue 模板中引入资源： <a class="header-anchor" href="#_2-在-vue-模板中引入资源" aria-label="Permalink to &quot;2. 在 Vue 模板中引入资源：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;img src=&quot;~@/assets/indexPage/bottom_ornament.png&quot; alt=&quot;&quot;/&gt;</span></span></code></pre></div><p>使用 ~ 来引入资源路径可以确保 Webpack 按照模块解析的方式来处理路径，避免相对路径解析错误的问题。@ 则是一个别名，通常指向项目的 src 目录，通过这种方式可以简化路径的书写，使代码更清晰易读。</p><h3 id="使用" tabindex="-1">使用： <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>vue create hello-world</span></span></code></pre></div><p>会进行一些选项选择， 选项可以存储一个 Preset。<br><img src="`+p+`" style="max-width:68%;"></p><h3 id="preset" tabindex="-1">Preset： <a class="header-anchor" href="#preset" aria-label="Permalink to &quot;Preset：&quot;">​</a></h3><p>Preset 支持远程加载。 里面可以指定一些自定义的插件。</p><p>preset 的示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;useConfigFiles&quot;: true,</span></span>
<span class="line"><span>  &quot;cssPreprocessor&quot;: &quot;sass&quot;,</span></span>
<span class="line"><span>  &quot;plugins&quot;: {</span></span>
<span class="line"><span>    &quot;@vue/cli-plugin-babel&quot;: {},</span></span>
<span class="line"><span>    &quot;@vue/cli-plugin-eslint&quot;: {</span></span>
<span class="line"><span>      &quot;config&quot;: &quot;airbnb&quot;,</span></span>
<span class="line"><span>      &quot;lintOn&quot;: [&quot;save&quot;, &quot;commit&quot;]</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;@vue/cli-plugin-router&quot;: {},</span></span>
<span class="line"><span>    &quot;@vue/cli-plugin-vuex&quot;: {}</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="自定义开发-preset" tabindex="-1">自定义开发 preset： <a class="header-anchor" href="#自定义开发-preset" aria-label="Permalink to &quot;自定义开发 preset：&quot;">​</a></h3><p>你可以通过发布 git repo 将一个 preset 分享给其他开发者。这个 repo 应该包含以下文件：<br> preset.json: 包含 preset 数据的主要文件（必需）。<br> generator.js: 一个可以注入或是修改项目中文件的 Generator。<br> prompts.js 一个可以通过命令行对话为 generator 收集选项的 prompts 文件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>使用：</span></span>
<span class="line"><span>vue create --preset gitlab:my-gitlab-server.com:group/projectname --clone my-project</span></span></code></pre></div><p>@vue/cli-service 也会安装 yorkie，它会让你在 package.json 的 gitHooks 字段中方便地指定 Git hook</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// package.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;gitHooks&quot;: {</span></span>
<span class="line"><span>    &quot;pre-commit&quot;: &quot;lint-staged&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>   &quot;lint-staged&quot;: {</span></span>
<span class="line"><span>    &quot;*.{js,vue}&quot;: &quot;vue-cli-service lint&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="vue-cli的自定义配置-vue-config-js" tabindex="-1">vue cli的自定义配置: vue.config.js <a class="header-anchor" href="#vue-cli的自定义配置-vue-config-js" aria-label="Permalink to &quot;vue cli的自定义配置: vue.config.js&quot;">​</a></h3><p>configureWebpack 扩展一些webpack的配置再这里写。比如新插件<br> pluginOptions 一些插件的选项配置<br> 配置参考：<a href="https://cli.vuejs.org/zh/config/#crossorigin" target="_blank" rel="noreferrer">https://cli.vuejs.org/zh/config/#crossorigin</a></p>`,25),o=[i];function l(c,u,r,h,d,g){return e(),s("div",null,o)}const q=a(t,[["render",l]]);export{b as __pageData,q as default};
