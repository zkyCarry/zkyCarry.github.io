import{_ as l,c as i,o as t,a1 as a}from"./chunks/framework.Bk1mwsJI.js";const c=JSON.parse('{"title":"视频","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"基础/视频.md","filePath":"基础/视频.md"}'),e={name:"基础/视频.md"},r=a('<h1 id="视频" tabindex="-1">视频 <a class="header-anchor" href="#视频" aria-label="Permalink to &quot;视频&quot;">​</a></h1><h2 id="库的使用" tabindex="-1">库的使用 <a class="header-anchor" href="#库的使用" aria-label="Permalink to &quot;库的使用&quot;">​</a></h2><ol><li>flv格式的就直接使用flv.js</li><li>mp4格式也可以使用flv.js</li><li>m3u8格式的就使用hls.js ????</li><li>移动端的浏览器默认集成了hls.js, 可以播放m3u8。pc端需要引入hls.js ？</li></ol><h2 id="流媒体视频格式" tabindex="-1">流媒体视频格式 <a class="header-anchor" href="#流媒体视频格式" aria-label="Permalink to &quot;流媒体视频格式&quot;">​</a></h2><p>好的，根据使用的广泛程度，我将常见的流媒体格式重新排序如下： .m3u8 flv</p><h3 id="_1-webrtc-web-real-time-communication" tabindex="-1">1. WebRTC（Web Real-Time Communication） <a class="header-anchor" href="#_1-webrtc-web-real-time-communication" aria-label="Permalink to &quot;1. WebRTC（Web Real-Time Communication）&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：无特定文件扩展名，基于实时传输协议</li><li><strong>开发者</strong>：W3C 和 IETF</li><li><strong>特点</strong>： <ul><li>实时通信：支持视频、音频和数据的实时传输。</li><li>点对点连接：减少延迟，适合视频通话和实时互动应用。</li><li>浏览器支持：被大多数现代浏览器（如 Chrome、Firefox）支持。</li></ul></li></ul><h3 id="_2-hls-http-live-streaming" tabindex="-1">2. HLS（HTTP Live Streaming） <a class="header-anchor" href="#_2-hls-http-live-streaming" aria-label="Permalink to &quot;2. HLS（HTTP Live Streaming）&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：.m3u8（播放列表文件）</li><li><strong>开发者</strong>：Apple</li><li><strong>特点</strong>： <ul><li>分段传输：将视频分成小片段，逐个下载和播放。</li><li>自适应比特率：根据网络状况自动调整视频质量。</li><li>广泛支持：被大多数现代设备和浏览器支持，特别是在 iOS 设备上。</li></ul></li></ul><h3 id="_3-mp4-mpeg-4-part-14" tabindex="-1">3. MP4（MPEG-4 Part 14） <a class="header-anchor" href="#_3-mp4-mpeg-4-part-14" aria-label="Permalink to &quot;3. MP4（MPEG-4 Part 14）&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：.mp4</li><li><strong>开发者</strong>：MPEG</li><li><strong>特点</strong>： <ul><li>广泛支持：几乎所有设备和平台都支持。</li><li>高效压缩：常用 H.264 或 H.265 编解码器，提供高效的视频压缩。</li><li>灵活性：可以包含视频、音频、字幕和元数据。</li></ul></li></ul><h3 id="_4-dash-dynamic-adaptive-streaming-over-http" tabindex="-1">4. DASH（Dynamic Adaptive Streaming over HTTP） <a class="header-anchor" href="#_4-dash-dynamic-adaptive-streaming-over-http" aria-label="Permalink to &quot;4. DASH（Dynamic Adaptive Streaming over HTTP）&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：.mpd（媒体呈现描述文件）</li><li><strong>开发者</strong>：MPEG</li><li><strong>特点</strong>： <ul><li>自适应比特率：类似于 HLS，根据网络状况调整视频质量。</li><li>标准化：是一个国际标准，广泛应用于各种设备和平台。</li><li>灵活性：支持多种编解码器和容器格式。</li></ul></li></ul><h3 id="_5-rtmp-real-time-messaging-protocol" tabindex="-1">5. RTMP（Real-Time Messaging Protocol） <a class="header-anchor" href="#_5-rtmp-real-time-messaging-protocol" aria-label="Permalink to &quot;5. RTMP（Real-Time Messaging Protocol）&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：.flv、.f4v</li><li><strong>开发者</strong>：Adobe Systems</li><li><strong>特点</strong>： <ul><li>低延迟：适合直播和实时互动应用。</li><li>广泛应用：曾经是 Flash Player 的主要流媒体协议。</li><li>逐渐被淘汰：随着 Flash Player 的逐步退出，RTMP 的使用也在减少。</li></ul></li></ul><h3 id="_6-mpeg-ts-mpeg-transport-stream" tabindex="-1">6. MPEG-TS（MPEG Transport Stream） <a class="header-anchor" href="#_6-mpeg-ts-mpeg-transport-stream" aria-label="Permalink to &quot;6. MPEG-TS（MPEG Transport Stream）&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：.ts</li><li><strong>开发者</strong>：MPEG</li><li><strong>特点</strong>： <ul><li>广泛应用：用于广播电视、IPTV 和蓝光光盘。</li><li>实时流媒体：支持实时传输和多路复用。</li></ul></li></ul><h3 id="_7-cmaf-common-media-application-format" tabindex="-1">7. CMAF（Common Media Application Format） <a class="header-anchor" href="#_7-cmaf-common-media-application-format" aria-label="Permalink to &quot;7. CMAF（Common Media Application Format）&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：.cmf</li><li><strong>开发者</strong>：MPEG</li><li><strong>特点</strong>： <ul><li>统一格式：旨在统一 DASH 和 HLS 格式，减少存储和传输成本。</li><li>广泛支持：被多个流媒体平台和设备支持。</li></ul></li></ul><h3 id="_8-smooth-streaming" tabindex="-1">8. Smooth Streaming <a class="header-anchor" href="#_8-smooth-streaming" aria-label="Permalink to &quot;8. Smooth Streaming&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：.ism、.ismv、.isma</li><li><strong>开发者</strong>：Microsoft</li><li><strong>特点</strong>： <ul><li>自适应比特率：根据网络状况调整视频质量。</li><li>集成性：与 Microsoft 的生态系统（如 Azure Media Services）紧密集成。</li><li>支持广泛：主要用于 Windows 平台和 Silverlight 应用。</li></ul></li></ul><h3 id="_9-hds-http-dynamic-streaming" tabindex="-1">9. HDS（HTTP Dynamic Streaming） <a class="header-anchor" href="#_9-hds-http-dynamic-streaming" aria-label="Permalink to &quot;9. HDS（HTTP Dynamic Streaming）&quot;">​</a></h3><ul><li><strong>文件扩展名</strong>：.f4m</li><li><strong>开发者</strong>：Adobe Systems</li><li><strong>特点</strong>： <ul><li>自适应比特率：根据网络状况调整视频质量。</li><li>Flash 支持：主要用于 Flash Player，但随着 Flash 的逐步退出，使用减少。</li></ul></li></ul><h2 id="常见普通视频格式" tabindex="-1">常见普通视频格式 <a class="header-anchor" href="#常见普通视频格式" aria-label="Permalink to &quot;常见普通视频格式&quot;">​</a></h2><p>mp4，flv</p><ol><li><p><strong>MP4 (MPEG-4 Part 14)</strong>:</p><ul><li>优点：广泛支持，兼容性强，文件压缩率高，质量好。</li><li>用途：在线视频平台（如YouTube），移动设备，网络流媒体。</li></ul></li><li><p><strong>FLV (Flash Video)</strong>:</p><ul><li>优点：适合网络流媒体，文件小。</li><li>缺点：需要特定播放器（如Adobe Flash Player）。</li><li>用途：在线视频（如早期的YouTube）。</li></ul></li><li><p><strong>AVI (Audio Video Interleave)</strong>:</p><ul><li>优点：支持多种编码格式，质量高。</li><li>缺点：文件较大，不适合网络传输。</li><li>用途：视频编辑，存档。</li></ul></li><li><p><strong>MKV (Matroska Video)</strong>:</p><ul><li>优点：支持多种音轨和字幕，开源，灵活性高。</li><li>用途：高清电影，视频存档。</li></ul></li><li><p><strong>MOV (QuickTime File Format)</strong>:</p><ul><li>优点：高质量，支持多种编解码器。</li><li>用途：苹果设备，视频编辑。</li></ul></li><li><p><strong>WMV (Windows Media Video)</strong>:</p><ul><li>优点：文件压缩率高，适合网络传输。</li><li>缺点：主要在Windows平台上使用，兼容性较差。</li><li>用途：网络视频流，Windows平台视频播放。</li></ul></li><li><p><strong>WebM</strong>:</p><ul><li>优点：开源，适合网络流媒体，文件小。</li><li>用途：HTML5视频，网络流媒体。</li></ul></li><li><p><strong>MPEG (Moving Picture Experts Group)</strong>:</p><ul><li>优点：标准化，广泛支持。</li><li>用途：DVD视频，网络流媒体。</li></ul></li><li><p><strong>3GP</strong>:</p><ul><li>优点：文件小，适合移动设备。</li><li>缺点：质量较低。</li><li>用途：手机视频。</li></ul></li></ol><p>这些格式各有特点，选择合适的视频格式需要根据具体的使用场景和需求来决定。</p><h2 id="视频库" tabindex="-1">视频库 <a class="header-anchor" href="#视频库" aria-label="Permalink to &quot;视频库&quot;">​</a></h2><ol><li>flv.js 播放flv视频 <a href="https://github.com/bilibili/flv.js" target="_blank" rel="noreferrer">https://github.com/bilibili/flv.js</a></li><li>最强大的开源视频库：<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noreferrer">https://github.com/FFmpeg/FFmpeg</a> (js不能直接使用)</li><li>video.js：<a href="https://github.com/videojs/video.js" target="_blank" rel="noreferrer">https://github.com/videojs/video.js</a></li><li>hls.js：<a href="https://github.com/video-dev/hls.js" target="_blank" rel="noreferrer">https://github.com/video-dev/hls.js</a></li><li>xgplayer：<a href="https://github.com/bytedance/xgplayer" target="_blank" rel="noreferrer">https://github.com/bytedance/xgplayer</a></li></ol>',29),o=[r];function s(n,h,m,g,u,d){return t(),i("div",null,o)}const b=l(e,[["render",s]]);export{c as __pageData,b as default};
